<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	
	<!-- 第一步：数据源 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.url}">
		</property>
		<property name="driverClass" value="${jdbc.driver}">
		</property>
		<property name="user" value="${jdbc.username}">
		</property>
		<property name="password" value="${jdbc.password}">
		</property>
	</bean>
	<!-- 第二步：配置工厂。生产sqlSession -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource">
		</property>
		<property name="configLocation" value="classpath:sqlMapConfig.xml">
		</property>
		
	</bean>
	<!-- 第三步：事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource">
		</property>
	</bean>
	
	<!-- 整合mybatis：扫描接口，接口代理开发 * 映射文件的namespace必须是接口的全类路径名 * 映射文件的Statement的Id必须和接口的方法名一致
		* 接口和映射文件同名，且在同一个目录 * 接口的返回值类型必须和映射文件返回值类型匹配 * 接口传递参数类型必须和映射文件接受参数类型一致。 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.edu.dao">
		</property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory">
		</property>
	</bean>
	
	<!-- 开启shiro注解支持 -->
	<bean id="defaultAdvisorAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
		<!--  使用cglib为Action创建代理对象 -->
		<property name="proxyTargetClass" value="true"/>
	</bean>
	<!-- 切面类 -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"/>
	
	
	
	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<!-- 切面 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.edu.service.*.*(..))"/>
	</aop:config>
	
	<bean id="ShiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"/>
		<property name="loginUrl" value="/tologin"/>
		<property name="successUrl" value="/index.jsp"/>
		<property name="unauthorizedUrl" value="/unauthorizedUrl.jsp"/>	
		<property name="filterChainDefinitions">
			<value>
				
				/css/**=anon
				/js/**=anon
				/skin/**=anon
				/fonts/**=anon
				/Images/**=anon
				/jsp/Images/**=anon
				/jsp/tologin.jsp=anon
				/login=anon
				/tologin=anon
				/** = authc
			</value>
		</property>	
	</bean>
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="cucRealm"></property>
	</bean>
	<bean id="cucRealm" class="cn.edu.common.CucRealm"></bean>
</beans>
